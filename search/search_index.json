{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"xDSL","text":"<p>xDSL is a Python-native Compiler Toolkit. Design your own (domain-specific) compiler by mixing predefined IRs with your custom IR abstractions. Always optimize at the optimal abstraction level by lowering programs through multiple levels of IRs. Connect with the LLVM/MLIR ecosystem while benefiting from Python\u2019s productivity.</p> <ul> <li> <p> Rapid development in Pure Python</p> <p>Uses your existing Python skills to build compilers, fast.</p> </li> <li> <p> Easy installation</p> <p>Just <code>pip install xdsl</code>.</p> </li> <li> <p> Cross platform</p> <p>xDSL runs just about anywhere Python can.</p> </li> <li> <p> MLIR-compatible</p> <p>Uses the same textual format as MLIR for intermediate representation.</p> </li> <li> <p> Batteries included</p> <p>Leverage existing compiler and interpreter components.</p> </li> <li> <p> Open source</p> <p>xDSL is licensed under Apache License v2.0 with LLVM Exceptions.</p> </li> </ul>"},{"location":"#get-in-touch","title":"Get in touch","text":"<ul> <li>Chat on Zulip</li> <li>Report bugs and request new features</li> <li>Read or contribute to the code</li> </ul>"},{"location":"workshop/","title":"Workshop","text":"Redirecting to Workshop... <p>Redirecting to xDSL Workshop...</p>"},{"location":"about/challenge/","title":"The xDSL Challenge","text":"<p>We are developing a common ecosystem for building Domain Specific Languages (DSLs). This will significantly lower the barrier to entry in developing DSLs and aims to improve the end-user experience by affording a mature and well supported ecosystem based upon MLIR and LLVM.</p>"},{"location":"about/challenge/#the-challenge","title":"The challenge","text":"<p>Computer simulation is often refered to as the third methodology, complementing theory and experimentation for scientific and engineering research. More efficient aircraft designs, potental vaccines against disseases, increased understanding of the cosmos, more accurate weather modelling, and greater understanding of the fundamental forces underlying matter are just a few of the very many impacts that simulation has delivered, in-fact the vast majority of scientific and engineering developments of the past 20 years have, to some extent, involved simulation.</p> <p></p> <p>Given the importance of computer simulation it is no wonder that users are constantly demanding the ability to undertake more detailed runs at reduced time to solution. This raises a significant technological challenge, where both hardware and software struggle to keep up with such ambitions. Whilst there have been very significant improvements at the hardware level arguably many challenges have also been pushed over to the software side. A prime example of this was the leveling off of clock frequency increases, where the industry responded by significantly increasing the amount of parallelism to compensate and contine the growth in performance. We are now in a situation even with current generation supercomputers were the programming challenge to fully exploit an HPC machine is significant, with programmers needing to consider multiple levels of parallelism (inter-node, intra-node but also inter-socket, intra-socket, instruction level) and the interoperability of heterogeneous architectures such as CPUs and GPUs.</p>"},{"location":"about/challenge/#exascale-computing-on-the-horizon","title":"Exascale computing on the horizon","text":"<p>There is a great push in the community to develop exascale supercomputers, which are capable of performing over a Quintillion floating point calculations per second. Hardware has developed significantly towards this goal but in a way that presents more complexity to the end-user, for instance via high degrees of hardware heterogeneity, extremely large amounts of parallelism, deeper memory hierarchies, and novel hardware architectures. Whilst these facets can achieve such exascale raw performance, they make the programming of such machines far more complex using current approaches to writing HPC codes. This means that there is a danger that, in the coming decade, we will have extremely powerful supercomputing hardware but only a small number of applications that can fully exploit this by being able to invest the time of the few highly skilled experts in programming them.</p>"},{"location":"about/challenge/#domain-specific-languages-dsls-to-the-rescue","title":"Domain Specific Languages (DSLs) to the rescue?","text":"<p>It might be surprising that, by far, the most popular language that HPC codes are written in is Fortran. Whilst more modern languages, such as C++ and Python are slowly gaining more traction, the choice of Fortran due to its convenient language features for writing scientific codes and mature compiler support certainly made a lot of sense traditionally. However Fortran is a general purpose language where the programmer must specify the how as well as the what of their parallel computation. By raising the abstraction level to suit the specific application domain in question, programmers can then not only much more conveniently encode their applications but also the compiler has a rich amount of information which it can use to make tricky, low level choices around how best to run the code in parallel. </p> <p>Domain Specific Languages (DSLs) have grown in popularity in recent years and enable exactly this, raising the abstraction level to suiting the specific application domain in question. It has been found that these result in significant increases in programmer productivity, performance, and portability across architectures. Put simply, it is the strong belief of many in the HPC community that DSLs will enable domain, rather then HPC, experts to program and effectively exploit future exascale machines. However, the big challenge is that DSLs are typically implemented in isolation fashion with their software stacks siloed and sharing little code or infrastructure between them. This means that whilst a specific DSL might suit an application area, it\u2019s maturity, long term support, ability to efficiently exploit current and future technology might be highly questionable. Furthermore, the development of DSLs and underlying compilation support can be time consuming, with many failing to reach wide spread adoption.</p>"},{"location":"about/challenge/#our-solution-an-ecosystem-for-dsl-development","title":"Our solution - an ecosystem for DSL development","text":"<p>To address the challenge of isolate DSL software stacks which can suffer from long development times, immature software stacks, uncertain long term futures, and risky buy in from users we are developing a common ecosystem. This is illustrated below, where the special sauce enabling such a common infrastructure is Multi Level Intermediate Representation (MLIR). MLIR is a technology that has developed over the past couple of years and provides significant flexibility when representing programming languages, with the ability to fairly easily develop new MLIR dialects and build atop existing ones. Many MLIR dialects already exist and furthermore new dialects can be easily developed to support the expressiveness required by a wide range of DSLs for running on large-scale HPC machines. </p> <p></p> <p>There are many advantages to this approach, firstly the ability to benefit from a wealth of existing MLIR/LLVM tooling that already exists and successfully targets the wide range of hardware commonly found in HPC machines. This means that there is then significant reuse of infrastructure between DSLs, with improvements to specific parts of the ecosystem then often benefitting other DSLs. Furthermore it enables longevity of the DSL, as whilst the actual DSL abstraction itself might not be further developed, the underlying MLIR/LLVM compilation tools are very actively developed and maintained by a large and vibrant community. As such users can have reasonable confidence that their code will be able to run efficiently on a large number of future architectures. </p> <p>Such a unified ecosystem also benefits the DSL designer as they only need to implement a front-end for their language, generating the appropriate MLIR which can then benefit from the rest of the compilation stack. Many DSLs are currently encoded within Python, and as such in this project to aid the integration of such abstractions into MLIR we are developing a Python toolbox which will lower the barrier even further for DSL development. Moreover, we believe this also promotes integration between DSLs, where building upon MLIR will enable more easily sharing of features and as such open up specific DSLs to new communities.</p> <p>Performance portability is a key aim of this project, and we are targetting a variety of hardware including Intel, AMD, and ARM CPUs, Nvidia and AMD GPUs, Xilinx and Intel FPGAs, and the Cerebras CS-1. The hypothesis is that through existing LLVM support for these architectures and the rich dialects of MLIR then the user\u2019s application code written in their DSL of choice can remain largely unchanged between architectures, with the underlying compilation stack being able to efficiently target the technology.</p>"},{"location":"about/excalibur/","title":"ExCALIBUR","text":"<p>ExCALIBUR is a UK research programme that aims to deliver the next generation of high-performance simulation software for the highest-priority fields in UK research. It started in October 2019 and will run through until March 2025, redesigning high priority computer codes and algorithms to meet the demands of both advancing technology and UK research. </p> <p>xDSL has been funded by ExCALIBUR and is one of the cross-cutting research theme projects. We are working closely with numerous other ExCALIBUR projects and targetting a number of the H&amp;ES testbeds.</p>"},{"location":"about/partners/","title":"Project partners","text":""},{"location":"about/partners/#school-of-informatics-university-of-edinburgh","title":"School of Informatics (University of Edinburgh)","text":"<p>The School of Informatics leads this project, with Dr Tobias Grosser (the project PI) and Dr Michel Steuwer who are compiler, MLIR and LLVM experts. Being active collaborators to the MLIR and LLVM communities, they bring expertise around the development of appropriate MLIR dialects, the mechanism to connect Python based DSLs with MLIR, and integration with LLVM. Furthermore, their wide connections throughout the compiler communities means that the project is able to engage closely with that community and act as a bridge between people working in HPC and compilers.</p>"},{"location":"about/partners/#department-of-computing-imperial-college-london","title":"Department of Computing (Imperial College London)","text":"<p>Professor Paul Kelly and Dr Gerard Gorman provide DSL expertise to the project. Leading the development of numerous DSLs, including the popular and widely successeful Devito, their knowledge and experience is invaluable to ensure that the ecosystem being developed is wide ranging across DSLs. Furthermore, Devito is an explicit target of this project, using the Python-based MLIR integration toolbox that we will develop to integrate this DSL with our ecosystem. Additionally Paul and Gerard bring significant experience of working with seismic community, cloud computing, and interactive HPC technologies such as Jupyter notebooks, all of which are important considerations in this project to ensure that the DSL eco-system we will develop can interoperate with.</p>"},{"location":"about/partners/#epcc-university-of-edinburgh","title":"EPCC (University of Edinburgh)","text":"<p>EPCC is the UK\u2019s leading supercomputing centre, with Dr Nick Brown and Dr Amrey Krause providing HPC expertise at both the technology and application level. This includes expertise with a number of the project\u2019s target applications that we will be using as vehicles to evaluate the developed eco-system. During the project we will be using many of EPCC\u2019s hosted HPC systems which range from large-scale production machines such as the ARCHER2 UK national supercomputer, to more experimental systems such as the Cerebras CS-1 which contains a highly innovative massive-core CPU. </p>"},{"location":"developers/appdev/","title":"Application Developers","text":"<p>The developers of HPC applications have traditionally been forced to work in serial languages, such as Fortran or C, to develop their parallel codes. By leveraging libraries such as MPI or OpenMP, these developers are thus responsible for all the tricky, low level details of parallelism which is critical for performance but for many domain programmers is uninteresting from the perspective of the science or engineering they are looking to simulate. It is therefore highly beneficial to raise the abstraction level and for HPC programmers to encode their application in a much richer manner, thus providing significant information to the compiler for it to drive the parallelism. This is especially important as we move to exascale which the larger and more heterogeneous architectures.</p>"},{"location":"developers/appdev/#devito","title":"Devito","text":"<p>We are enhancing the Devito DSL by porting it on top of the xDSL common ecosystem. Devito is a Python based DSL enabling programmers to design highly optimised finite difference kernels for use in inversion methods. This popular tool is especially common for seismology workloads, however can be applied to very many different applications. The Devito xDSL fork is available here and will be enhanced as the xDSL project progresses.</p>"},{"location":"developers/appdev/#psyclone","title":"PSyclone","text":"<p>We are looking to enable PSyclone to utilise MLIR by integrating our xDSL common ecosystem. We will link to work and updates as these progress. </p>"},{"location":"developers/appdev/#fortran","title":"Fortran","text":"<p>There is much work currently on-going in the LLVM community around the Flang Fortran frontend. We believe that it will be possible to integrate the xDSL toolkit into Flang and enable DSL style abstractions in Fortran directly. </p>"},{"location":"developers/dsldev/","title":"DSL Developers","text":"<p>In xDSL we are developing a Python toolbox for MLIR which will enable easy integration of MLIR with Python-based DSLs. Consequently, whilst DSL infrastructures have been traditionally highly siloed, using xDSL such developers can view their DSL as a front-end on-top of MLIR and LLVM, with xDSL facilitating this arrangement. The benefit for DSL developers is that this significantly lowers the barrier to entry for developing and maintaining a DSL, as well as providing a wealth of supporting tools for their users which are already integrated with MLIR.</p>"},{"location":"developers/dsldev/#xdsl-python-toolkit","title":"xDSL Python toolkit","text":"<p>The xDSL toolkit is available as the PyPi xDSL package with source code in the xDSL GitHub repository</p>"},{"location":"events/2022-europar/","title":"Euro-Par Workshop","text":"<p>Domain Specific Languages (DSLs) have the potential to revolutionize the development of scientific high-performance software by providing scientists with abstractions that are tailored for their specific problem. By encoding rich domain knowledge by the programmer, the compilation tool-chain is then able to make effective choices around parallelism. Furthermore, if designed correctly, then the programmer is able to express their workload in an architecture-independent fashion, thus making portability across architectures possible, with the compilation tool-chain doing much of the heavy lifting.</p> <p>This is especially important in HPC as even effectively exploiting today\u2019s supercomputers is fraught will difficulty and in the domain of the few experts. As we move towards exascale, with increasingly complex heterogeneous systems, the ability to fully exploit these machines will be beyond even the most experienced guru. Put simply, the languages and technologies that are currently ubiquitous in HPC (C, Fortran, MPI, OpenMP, CUDA) are too low level for end-user programming and the abstraction level needs to be raised.</p> <p>The term \u201clanguage\u201d in DSLs can be a bit of a misnomer, as the name of the game here is raising the abstraction level, and consequently technologies such as abstractions embedded inside existing languages, frameworks and libraries are also highly topical. Many believe that DSLs have the potential to get us closer to achieving the three P\u2019s; productivity, performance, and performance portability. Whilst historically this objective has been often seen as somewhat of a chimera, there is wide acceptance in the HPC community that we need to solve the programming challenges associated with future exascale machines. Furthermore, there is a growing consensus that the benefits that DSLs can deliver are paramount and could be critical in unlocking the full potential of future supercomputers.</p>"},{"location":"events/2022-europar/#schedule","title":"Schedule","text":"<p>The workshop will be held in the Hugh Fraser room and running between 9:00am and 12:30pm on Monday 22nd of August.</p> Time Title Presenter 9:00 - 9:05 Session welcome and aims Nick Brown 9:05 - 9:40 Keynote: Evolutionary Re-Engineering of an Industrial HPC application with OP2 Gihan Mudalige 9:40 - 10:05 Research paper: Performance of the Vipera framework for DSLs on micro-core architectures Maurice Jamieson 10:05 - 10:30 Research paper: FFTc: An MLIR Dialect for Developing HPC Fast Fourier Transform Libraries Yifei He 10:30 - 11:00 Morning coffee break 11:00 - 11:25 Invited talk: xDSL an ecosystem for DSL development Tobias Grosser 11:25 - 11:50 Research paper: TensorFlow as a DSL for stencil-based computation on the Cerebras Wafer Scale Engine Nick Brown 11:50 - 12:25 Panel session 12:25 - 12:30 Conclusions and next steps Nick Brown"},{"location":"events/2022-europar/#gihan-mudalige","title":"Gihan Mudalige","text":"<p>Keynote: Evolutionary Re-Engineering of an Industrial HPC application with OP2</p> <p>The rapid evolution of High Performance Computing architectures has resulted in highly complex systems with massively parallel heterogeneous processors, deep and multiple memory hierarchies and interconnects. As a result, maintaining performance as platforms change has becomes increasingly difficult. On the one hand, open standards have been slow to catch up with supporting new hardware, and for many real applications have not provided the best performance achievable from these systems. On the other hand, proprietary solutions have only targeted narrow vendor-specific devices resulting in a proliferation of parallel programming models and technologies. In this talk I will present how we used OP2, one of the earliest DSLs developed in the UK, to re-engineer the Hydra CFD application, a production HPC application from Rolls-Royce to achieve a performance portable code-base.  The recent use of the new application, OP2-Hydra, to carry out break-through simulations reaching fidelity levels for virtual certification of aero gas-turbine engine design will be presented. I will detail the simple source-to-source and automatic code-generation techniques based on maintainable software technologies led to these achievements enabling to evolve the application without overhauling or re-writing the entire code-base. The talk will discuss how OP2 has remained agile in delivering performance portability in the face of over a decade of hardware and parallel programming innovations and discuss lessons learnt from this work.</p>"},{"location":"events/2022-europar/#maurice-jamieson","title":"Maurice Jamieson","text":"<p>Research paper: Performance of the Vipera framework for DSLs on micro-core architectures</p> <p>Authors: Maurice Jamieson, Nick Brown</p> <p>Vipera provides a compiler and runtime framework for implementing dynamic Domain-Specific Languages on micro-core architectures. The performance and code size of the generated code is critical on these architectures. In this paper we present the results of our investigations into the efficiency of Vipera in terms of code performance and size.</p>"},{"location":"events/2022-europar/#yifei-he","title":"Yifei He","text":"<p>Research paper: FFTc: An MLIR Dialect for Developing HPC Fast Fourier Transform Libraries</p> <p>Authors: Yifei He, Artur Podobas, M\u00e5ns Andersson and Stefano Markidis</p> <p>Discrete Fourier Transform (DFT) libraries are one of the most critical software components for scientific computing. Inspired by FFTW, a widely used library for DFT HPC calculations, we apply compiler technologies for the development of HPC Fourier transform libraries. In this work, we introduce FFTc, a domain-specific language, based on Multi-Level Intermediate Representation (MLIR), for expressing Fourier Transform algorithms. We present the initial design, implementation, and preliminary results of FFTc.</p>"},{"location":"events/2022-europar/#tobias-grosser","title":"Tobias Grosser","text":"<p>Invited talk: xDSL an ecosystem for DSL development</p> <p>Domain Specific Languages show great potential for a range of domains, including HPC. However a major blocker has been that toolchains are siloed, sharing little or no infrastructure which not only increases development time but also raises questions around long term maintenance and support for future architectures. Recent advances in compiling tools, and the community at large, have resulted in Multi-Level Intermediate Representation (MLIR) which promotes much easier reuse due to the ability to compose IR dialects together and to then rely on existing transformations which undertake optimisation and ultimately executable code via LLVM-IR or some other target. However, written in C++, there is a fairly steep learning curve in mastering and integrating MLIR, and-so the xDSL project are developing a Python toolbox which enables DSL developers to much more easily integrate with this technology, and define their own dialects and transformations in Python. Furthermore, by providing a rich set of existing dialects targetted at HPC, it is our objective that DSL developers can focus on their abstractions with the required implementation being a thin layer on-top of an existing, rich, ecosystem.</p>"},{"location":"events/2022-europar/#nick-brown","title":"Nick Brown","text":"<p>Reseach paper: TensorFlow as a DSL for stencil-based computation on the Cerebras Wafer Scale Engine</p> <p>Authors: Nick Brown, Brandon Echols, Justs Zarins, Tobias Grosser</p> <p>The Cerebras Wafer Scale Engine (WSE) is an accelerator that combines hundreds of thousands of AI-cores onto a single chip. Whilst this technology has been designed for machine learning workloads, the significant amount of available raw compute means that it is also a very interesting potential target for accelerating traditional HPC computational codes. Many of these algorithms are stencil-based, where update operations involve contributions from neighbouring elements, and in this paper we explore the suitability of this technology for such codes from the perspective of an early adopter of the technology, compared to CPUs and GPUs. Using TensorFlow as the interface, we explore the performance and demonstrate that, whilst there is still work to be done around exposing the programming interface to users, performance of the WSE is impressive as it out performs four V100 GPUs by two and a half times and two Intel Xeon Platinum CPUs by around 114 times in our experiments. There is significant potential therefore for this technology to play an important role in accelerating HPC codes on future exascale supercomputers.</p>"},{"location":"events/2025-ASPLOS/","title":"xDSL: a Python-based Compiler Ecosystem","text":"<p>We will be presenting xDSL as part of the ASPLOS 2025 tutorial session.</p>"},{"location":"events/2025-ASPLOS/#details","title":"Details","text":"<p>Date and Time: Sunday 30 March 2025, 9:00-12:30 Location: Leeuwen room II</p>"},{"location":"events/2025-ASPLOS/#abstract","title":"Abstract","text":"<p>xDSL is a Python-based framework that enhances MLIR by enabling flexible interaction through a shared textual IR format and the IRDL dialect, which defines other dialects. It supports native Python development, DSL integration, and low-level compiler extensions, simplifying compiler research and prototyping. By offering loosely coupled integration with MLIR, xDSL reduces the need for deep expertise in C++ and LLVM, making it accessible for diverse use cases while streamlining compiler workflows.</p> <p>In this tutorial, we will introduce xDSL and some of its so far applications in various application domains, demonstrate its capabilities, and guide attendees in creating and optimizing domain-specific languages using MLIR through hands-on exercises. This tutorial introduces xDSL\u2019s core concepts and practical implementation techniques through hands-on examples. In more detail, we will provide participants with the necessary information on 1) how to define, extend and combine IR dialects, 2) leverage the existing optimization capabilities to define transformation passes that operate domain-specific and across dialects, 3) lower dialects and interface with existing MLIR/LLVM workflows. By the end, attendees will understand how to develop efficient, maintainable DSL compilers using xDSL\u2019s modular approach, and be equipped to integrate xDSL into their development workflows.</p>"},{"location":"events/2025-ASPLOS/#links","title":"Links","text":"<ul> <li>xDSL Website</li> <li>xDSL GitHub Repository</li> </ul>"},{"location":"events/2025-ASPLOS/#program","title":"Program","text":"Time Event Speaker(s) 09:00-09:05 Welcome Sasha Lopoukhine (University of Cambridge) 09:05-09:25 xDSL: Overview and Why to Adopt It Tobias Grosser (University of Cambridge) and Chris Vasiladiotis (University of Edinburgh) 09:25-09:45 Hardware-Informed Domain-Specific Transformations Sasha Lopoukhine (University of Cambridge) 09:45-10:05 HPC Programmer Productivity on Novel Architectures with xDSL talk Nick Brown (EPCC at the University of Edinburgh) 10:05-10:30 Introduction to MLIR Sasha Lopoukhine (University of Cambridge) and Chris Vasiladiotis (University of Edinburgh) 10:30-11:00 Coffee Break 11:00-12:25 Hands-on Interactive Tutorial Sasha Lopoukhine (University of Cambridge) and Chris Vasiladiotis (University of Edinburgh) 12:25-12:30 Closing Remarks"},{"location":"events/2025-ASPLOS/#publications","title":"Publications","text":"<ol> <li>xDSL: Sidekick Compilation for SSA-Based Compilers, Fehr et al., CGO 2025</li> <li>A Shared Compilation Stack for Distributed-Memory Parallelism in Stencil DSLs, Bisbas et al., ASPLOS 2024</li> <li>A Multi-level Compiler Backend for Accelerated Micro-kernels Targeting RISC-V ISA Extensions, Lopoukhine et al., CGO 2025</li> <li>Seamless Acceleration of Fortran Intrinsics via AMD AI Engines, Brown et al., FPGA 2025</li> <li>Fully Integrating the Flang Fortran Compiler with Standard MLIR, Brown, SC 2024</li> </ol>"},{"location":"events/2025-ASPLOS/#team","title":"Team","text":"Tobias Grosser <p>     Tobias Grosser is an Associate Professor at the University of Cambridge and an     advocate for open-source-first research. Tobias co-founded the Polyhedral loop     optimization framework Polly, the FPL Presburger Math Library for MLIR, the     LLHD/CIRCT hardware-design compiler, and is advocating teaching compiler design     using state-of-the-art technology from the MLIR/LLVM ecosystem supported by     his Python-Native xDSL compiler. Tobias was a Google PhD Fellow at ENS     Paris, an SNSF Ambizione Fellow at ETH Zurich, and a Reader at the University     of Edinburgh. He supervises currently six PhD students who actively contribute     to the open-source compiler ecosystem.     </p> Nick Brown <p>     Nick Brown is a Senior Research Fellow at EPCC, the University of Edinburgh, with a strong focus on High Performance     Computing (HPC). Working at the UK\u2019s leading supercomputing centre, much of his research centres around the role that     novel hardware can play in future supercomputers. Given the energy efficiency of many emerging hardware technologies,     his work is particularly relevant to advancing supercomputing workloads towards Net-Zero goals. Nick is deeply     motivated by the grand challenge of enabling scientific programmers to effectively leverage these technologies     without requiring extensive expertise in hardware or architecture. His research integrates novel algorithmic     approaches for new hardware, programming language and library design, and compiler development to bridge this gap     and empower researchers in the HPC community.     </p> Chris Vasiladiotis <p>     Chris Vasiladiotis is a Research Associate at the University of Edinburgh.     His research interests lie in compiler technologies and domain-specific languages (DSLs), aiming to bridge the gap     between hardware capabilities and software efficiency. He is actively involved in the development of xDSL, a     Python-based compiler infrastructure designed to simplify the creation and optimization of DSLs using MLIR.     Chris holds a PhD in Computer Science from the University of Edinburgh where he worked on hybrid static/dynamic     automatic parallelization techniques for applications utilizing heap-based data structures.     </p> Sasha Lopoukhine <p>     Sasha Lopoukhine is a PhD student at the University of Cambridge, researching making machine learning compilers more     approachable and extensible. His recent work has been to leverage xDSL to implement a backend for linear algebra     micro-kernels targeting ETH's Snitch core, outperforming the state-of-the-art LLVM backend by a factor of 20.     </p>"},{"location":"events/2025-ASPLOS/#organization","title":"Organization","text":"<p>Please contact Chris Vasiladiotis for any questions or further information.</p>"},{"location":"events/2025-HiPEAC/","title":"HiPeac 2025 Workshop","text":"<p>We will be presenting a workshop titled xDSL: a Python-based compiler ecosystem.</p> <p>Workshop agenda:</p> <p>10:00 - 10:05: Introduction and welcome (Nick Brown, EPCC at the University of Edinburgh)</p> <p>10:05 - 10:40: xDSL overview and why adopt this? (Tobias Grosser, Cambridge University)</p> <p>10:40 - 11:00: Developing a compiler stack for the RISC-V PULP snitch using xDSL (Chris Vasiladiotis, University of Edinburgh)</p> <p>11:00 - 11:30: Break</p> <p>11:30 - 11:50: Hardware-Informed Domain-Specific Transformations (Sasha Lopoukhine, Cambridge University)</p> <p>11:50 - 12:10: An automated stencil compilation flow for the Cerebras CS-2 (Nicolai Stawinoga, Technische Universit\u00e4t Berlin)</p> <p>12:10 - 12:30: A shared HPC DSL compilation stack with xDSL for the Devito and PSyclone DSLs (George Bisbas, Imperial College London)</p> <p>12:30 - 12:50: Fortran programming of novel accelerators for HPC (Nick Brown, EPCC at the University of Edinburgh)</p> <p>12:50 - 13:00: Conclusions and next steps (Tobias Grosser, Cambridge University)</p>"},{"location":"events/2025-winter-school/","title":"MLIR Winter School","text":"<p>From January 28 to 31, as part of the DeepGreen project, we are participating in a Winter School on the MLIR compilation infrastructure in Paris (H\u00f4tel Maison Montmartre). The program is available here.</p> <p>In recent years, MLIR-based compilers have been widely adopted in both academia and industry. MLIR has become a de facto standard in many sectors and a shared compiler infrastructure, enabling new projects to build on sound and reliable existing solutions. This Winter School aims to facilitate the discovery and adoption of this growing, dynamic, and innovative software ecosystem.</p> <p>The Winter School will be preceded by a one-day workshop at Google Paris headquarters on compiler infrastructures for Machine Learning. The program will include an introduction to MLIR concepts using xDSL.</p>"},{"location":"news/","title":"News","text":""},{"location":"news/2021/08/10/project-kicks-off/","title":"Project kicks off","text":"<p>We held our project kickoff meeting today to mark the official start of the project and discuss the plan for the next three years. The intention was to set short term project goals and discuss the initial activities that must be undertaken by the team. We are very excited to be working on this specific topic, with Tobias and Michel already having worked extensively with MLIR and have existing project work that will form a basis for our starting point when looking to connect MLIR with Python. We were also busy in August planning our initial knowledge exchange activities, and have a number of planned events which we will advertise in the coming months.</p> <p>We strongly believe that the development of a common DSL eco-system could be transformative for the HPC community and will benefit different sub-communities in different ways. The most obvious beneficiaries will be the application developers who will be able to select the most appropriate programming abstractions to suit their scientific domain, safe in the knowledge that there is a mature and well supported underlying toolchain. We also believe that DSL developers will benefit greatly from the advances that we expect to make in this project, as they will not have to reinvent the wheel when looking to develop a new domain specific abstraction. Currently such tools tend to be heavily siloed, sharing little common code and representiving a significant investment on behalf of the developer to get a working and reliable system. We believe that our eco-system will free DSL developers to concentrate on their abstractions and could signfiicantly increase the number of DSLs available.</p> <p>It\u2019s certainly exciting for there to be so much potential, and we will be posting regular updates and organising numerous events during the project lifetime.</p>","tags":["project"]},{"location":"news/2021/09/14/dsl-keynote-at-iwomp/","title":"DSL keynote at IWOMP","text":"<p>IWOMP is a popular annual conference focussed on parallel programming using OpenMP. It\u2019s success has grown from the fact that there are always numerous interesting and innovative ideas being discussed. A major cornerstone of any conference is the keynote talk which this year was delivered by Paul Kelly, who is also co-I on XDSL. Paul was talking about how we might go about achieving the elusive goals of programmer productivity, performance and portability across architectures, with DSLs having an important role to play here. However the languages themselves are not enough and Paul\u2019s message was that the key to success here, and wide spread adoption of DSLs, is the underlying compiler architecture. Commonly DSL implementations (the compilers) are standalone, sharing little common infrastructure and ultimately relying on the support of a small developer base. With limited, if any, shared components this makes the job of the DSL developer far more difficult. Building on MLIR, as we aim to do in this project, is one way in which this situation can be improved, and Paul describes how this can establish community support for code generation tools which then can underpin multiple front-end DSLS.s Ultimately this approach results in a more mature ecosystem and reduced barrier to entry for DSL developers.</p> <p></p>","tags":["keynote"]},{"location":"news/2021/11/10/bof-at-sc21/","title":"BoF at SC21","text":"<p>Supercomputing is the top HPC conference in the yearly calendar and for 2021 is running in a hybrid mode with both physical and virtual attendance. Therefore it is a fantastic opportunity to hold a session around the consolidation of DSL ecosystems.</p> <p></p> <p>Domain Specific Languages (DSLs) are a powerful way of providing programmer productivity and performance when developing HPC codes. The enriched information enables effective exploitation of supercomputers, which is especially important as we reach exascale due to the high degrees of parallelism and complex heterogeneous architectures. DSLs, however, are often developed in isolation, sharing little underlying infrastructure, which can mean they are somewhat immature, suffering from bugs, a potential lack of maintenance and lack of third party tooling. </p> <p>In this BoF we will focus on how we, as a community, can consolidate our efforts and look to develop a common DSL ecosystem. Such an activity could be game-changing in providing application developers with mature, feature rich, abstract programming environments enabling effective exploitation of future HPC machines. However, the devil is in the detail and there are many challenges that must be solved to develop and provide such a solution. These include requirements driven by the application developers, the perspectives of the DSL designers and what support they need, and to the compilation stack and which are the most appropriate technologies. </p> <p>It is the intention of this BoF to provide an interactive session where we as the community can meet to discuss these aspects, highlight existing activities already underway that could compliment efforts here, and take the first step in developing a common unified ecosystem for DSL development</p>","tags":["BoF"]},{"location":"news/2021/11/10/bof-at-sc21/#when-and-where","title":"When and where?","text":"<p>Room 222 in St. Louis and via the SC online platform. Tuesday, 16 November 2021 between 12:15pm and 1:15pm CST</p> <p>Please register your interest for further involvement in future discussions and events around this topic here</p>","tags":["BoF"]},{"location":"news/2021/11/10/bof-at-sc21/#view-the-schedule","title":"View the schedule","text":"<p>The SC schedule can be viewed here</p>","tags":["BoF"]},{"location":"news/2021/11/20/phd-opportunity/","title":"PhD opportunity","text":"<p>We are advertising for a fully funded (with nationality restrictions) PhD position at the University of Edinburgh with the student based at EPCC and in collaboration with the School of Informatics.</p>","tags":["PhD"]},{"location":"news/2021/11/20/phd-opportunity/#about-the-project","title":"About the project","text":"<p>Writing efficient parallel code for current generation supercomputers is difficult and in the domain of the (relatively) few experts. However this situation is set to become even more challenging as the trend for heterogeneity (i.e. use of accelerators) and scale increase significantly with next generation exascale machines. Put simply, sequential languages that we have relied upon for so long to write our parallel codes do not provide the necessary abstractions when it comes to writing parallel codes. As a community we have gotten around this by making it the job of the programmer to determine all aspects of parallelism for their code and provide their own parallel abstractions (e.g. by explicitly designing at the code level for geometric decomposition, or divide-and-conquer, or pipeline parallelism), but determining this low level and tricky detail is time consuming, requiring significant expertise, as well as not being scalable to future much larger and more complex supercomputers.</p> <p>There is however another way, and that is of the use of Domain Specific Languages (DSLs). These are languages which, out of the box, provide specific abstractions to the programmer which they can then use as a basis for writing their code. The idea being that by encouraging the programmer to work within the confines of specific rules governed by the abstractions and restrictions of a specific domain, then there is a significant amount of information upon which the compiler can act to determine details that traditionally required the programmer to specify manually. In-fact the word language is a bit of a misnomer here, instead the key is abstractions as many of these technologies are embedded within existing languages such as Python.</p> <p></p> <p>DSLs have demonstrated their potential to play an important role in programming future exascale simulation codes, however there is a big problem! The issue is around the underlying compilation stack, where DSLs are often siloed and tend to share very little, if any, underlying infrastructure. This means that it can be costly to develop new DSLs, the underlying technology stack can be brittle, and there can be a lack of third party tools such as debuggers and profilers. But there is also a potential solution and that is of Multi Level Intermediate Representation (MLIR) which is a framework for IR that enables one to effectively lower source code to the general representation required by the LLVM compiler through a series of pre-built abstractions. There are very many existing MLIR dialects, with it being possible to write new ones too, thus enabling many different languages, abstractions, and domains to more readily integrate with the existing and mature LLVM tooling without losing information in the translation process.</p> <p>DSL looks to develop a unified DSL ecosystem based upon MLIR, with the idea being that DSL front-ends will be able to readily integrate with our ecosystem and the appropriate MLIR dialects. Upon doing so the DSL will then benefit from the mature, and well supported, LLVM tooling whilst still being able to exploit the high level domain-specific information provided by the programmer when making important decisions around how to map to the hardware (e.g. choices around parallelism and specific accelerators). Ultimately this will significantly reduce the effort required to develop DSLs and provide a rich, well supported compilation stack with a large variety of third party tooling.</p>","tags":["PhD"]},{"location":"news/2021/11/20/phd-opportunity/#who-you-would-be-working-with","title":"Who you would be working with","text":"<p>This PhD position is at the University of Edinburgh and the student would be supervised by Dr Nick Brown and Dr Tobias Grosser. The student would be based in EPCC. EPCC is the UK\u2019s leading HPC centre which undertakes a wide range of activities including research into HPC, HPC application development, and the management of numerous supercomputers including ARCHER2 the national service. There would also be the opportunity for the student to become involved in EPCC\u2019s highly successful MSc in HPC and HPC with data science. The student would also be working closely with the School of Informatics which is a world leader in Computer Science research, and most applicable to this project very highly regarded in the compilers and programming language communities.</p>","tags":["PhD"]},{"location":"news/2021/11/20/phd-opportunity/#for-more-details","title":"For more details","text":"<p>For more details please see the FindaPhD advert which includes details of how to apply.</p>","tags":["PhD"]},{"location":"news/2021/12/13/position-available-on-xdsl-project/","title":"Position available on xDSL project","text":"<p>Are you interested in Domain Specific Languages (DSLs), compilers, and HPC? If so then come work at the School of Informatics, University of Edinburgh, where you will be involved revolutionising the compiler stack for DSLs to develop a common, unified, technology built on MLIR and LLVM.</p>","tags":["project"]},{"location":"news/2021/12/13/position-available-on-xdsl-project/#details-of-the-opportunity","title":"Details of the opportunity","text":"<p>We are advertising for a Postdoctoral Research Associate in the Compiler and Runtime Systems Group at the School of Informatics, University of Edinburgh, to work on the xDSL project. The objective of xDSL is to revolutionize the design of DSL compiler implementations by leveraging the breadth and cross-industry support of the MLIR compiler and Python ecosystems. Python is the tool of choice for application developers in many domains, such as machine learning, data science, and - as we believe - an important component of the future of High Performance Computing software. </p> <p>Via this project the successful applicant will work together with the Python, HPC, and MLIR compiler communities to build a next-generation DSL-design stack that effectively connects these communities. Instead of building DSL compilers as isolated monolithic towers, the purpose of our research is to design a toolbox that enables developers to build DSLs using a rich ecosystem of shared intermediate representations and optimizations.</p> <p>xDSl is funded by ExCALIBUR, a large UK program to prepare key simulation codes for exascale, and the successful candidate will have the opportunity to work closely with world-leading experts in Compilers, Computational Science, and HPC from academia and industry. We aim for high-impact publications at the top venues in PL and Compilation (such as PLDI and CGO), Computational Science (such as ICCS and ACM TOMS), as well as HPC (such as SC and ICS). The candidate will directly contribute to open-source software that we develop in close collaboration with the community.</p>","tags":["project"]},{"location":"news/2021/12/13/position-available-on-xdsl-project/#for-more-information","title":"For more information","text":"<p>Does this sound interesting, do you think you are a good match for working on the xDSL project? If so, then there are further details here. Applications must be recieved by 5pm on the 5th of January 2022, and the link also contains details about how to apply for this role.</p>","tags":["project"]},{"location":"news/2022/06/12/irdl-paper-presented-at-pldi-conference/","title":"IRDL paper presented at PLDI conference","text":"<p>IRDL is a domain-specific language to define intermediate representations (IRs). This is important because the current state-of-the-art with MLIR is to define a dialect using C++ and MLIR specific constructions which is a complex and time consuming process that required substantial expertise. By contrast IRDL is presented as a set of Python decorators and classes, readily enabling compiler developers to define a dialect and transformations upon this.</p> <p></p> <p>Of-course the definition of a DSL for IR construction is not enough, one also needs to demonstrate that this is capable of expressing the wide variety of existing IR dialects, and to that end Fehr analyzed all twenty eight domain-specific IRs developed as part of LLVM\u2019s MLIR over the last two years and demonstrated how to express these exclusively in IRDL, only rarely requiring IRDL\u2019s support for C++ extensions. </p> <p>The flexibility and productivity offered by IRDL is the reason why this is one of the key technologies used in the xDSL project, with xDSL itself relying heavily on it. To date we have had some excellent results using IRDL when defining our DSL dialects in this project.</p>","tags":["publication","technical"]},{"location":"news/2022/06/12/irdl-paper-presented-at-pldi-conference/#for-more-information","title":"For more information","text":"<p>A preprint of the paper can be read here.</p>","tags":["publication","technical"]},{"location":"news/2022/06/24/dsl-pasc-mini-symposium/","title":"DSL PASC mini-symposium","text":"<p>The Platform for Advanced Scientific Computing (PASC) Conference brings together domain scientists, computer scientists, HPC professionals, and vendors to talk about some of the challenges and opportunities we face in HPC. Held annually and located this year in Basel, it will be the first time since 2019 that the conference has been in-person albeit with an additional online component too for those who can not travel.</p> <p></p> <p>PASC should be especially interesting this year due to the recent news that the Frontier US machine has broken the exaflop barrier, moving us truely into the exascale era. However a key challenge is being able to exploit such supercomputers, and that is where a lot of the focus of PASC lies. Our interests are obviously around using DSLs to raise the abstraction level, enabling programmers to concentrate on the science of their simulation rather than having to be bogged down with the tricky, low level details of parallelism.</p> <p>To this end we have organised a mini-symposium around DSLs titled Domain Specific Languages (DSLs) for Revolutionising HPC Code Development: A Panacea or Empty Promises? where we will be bringing together some of the community\u2019s leading players to discuss the role of DSLs and how we should be driving forward this important enabling technology.</p> <p>There will be three talks and a panel session as part of PASC, where we will start with a talk from Chris Maynard from the Met Office who will be talking about the PSyclone DSL used for climate and weather codes (more details here). This will then be followed by Nicolas Vasilache from Google who will talk about compiler innovations more widely and how recent developments and technology trends are very exciting for this area (more details here). The third talk will be from Daniel Shapero, who is a senior research scientist at the Polar Science Center of the University of Washington, and he will be talking from the user perspective around developing libraries on-top of DSLs (more details here). The session will then conclude with a panel where we will discuss some of the themes raised and challenges identified.</p> <p>The session is running on Wednesday 29th of June between 2pm and 4pm CEST both in-person and online, if you are interested in attending then you can register for PASC here.</p>","tags":["publication","technical"]},{"location":"news/2022/07/12/xdsl-at-the-excalibur-workshop/","title":"xDSL at the ExCALIBUR workshop","text":"<p>This week saw the two day ExCALIBUR workshop held at the Met Office where representatives from across the programme met and discussed project-level updates as well as opportunities for collaboration and interaction during the research. There were some very interesting projects presented, and clearly the programme is doing a fantastic job pushing UK science towards exascale and beyond.</p> <p></p> <p>As part of this workshop xDSL PI, Tobias Grosser, gave an update about the xDSL project itself and, considering that xDSL has been running for almost a year, this was also an ideal opportunity to take stock of where we are as a project, to reflect on early successes, and refine the strategy going forwards into the next two years. Tobias described the underlying xDSL framework that has been developed in the past 12 months, before highlighting work that has been undertaken to build on this for both the existing PSyclone and Devito DSLs. </p> <p>The compilers of both these existing DSLs have been enhanced to run on-top of the xDSL stack, with bespoke dialects and transformations provided which are expressed via the IRDL MLIR-DSL. Exploitation of distributed memory parallelism and GPUs is also possible with xDSL, for instance the PSyclone xDSL work already having been demonstrated to run on 32768 cores of ARCHER2 and V100 GPUs. Moving forwards, the integration with xDSL provides numerous opportunities, including the ability to leverage the LLVM ecosystem more widely and easily build upon work being done elsewhere by the community.</p>","tags":["project","technical"]},{"location":"news/2023/01/16/new-year-new-hackathon/","title":"New year, new hackathon","text":"<p>Last week 2023 got off to a strong, but windy, start with an all week xDSL hackathon held in Edinburgh. With in-person participants from ETH Zurich and Imperial, and online attendees from as far away as Mumbai in India, it was a great opportunity to prioritise the list of tasks we wanted to get sorted and make that happen.</p> <p></p> <p>One of the exciting aspects about these hackathon (apart from all the tasty treats throughout the day!) is how, from day to day or even hour to hour, different groups form, work on something, and then break apart once the task has been completed for the cycle to restart all over again! An area of high priority during the session was the xDSL parsing functionality, which had been developed early on during the project and then been updated but without much overarching design. This was completely rewritten, and some enhancements to how people use IRDL were also developed which will find their way into the next release.</p> <p>We also made a strong start on bringing over the GPU dialect and cleaning this up (watch this space, it will be available soon!) and the most obvious change has been the website, where a revamp of the main website has been undertaken. This is especially nice as it enabled us to bring in some of the Jupyter notebooks that we have been developing for interested users to experiment with online. We also discovered that Anton, who joined the project late last year, is a highly skilled photographer - he was busy taking photos of everyone (and the rather windswept group photo!) for the website\u2019s new team page. </p>","tags":["hackathon","technical"]},{"location":"news/2023/02/25/eth-zurich-presentation/","title":"ETH Zurich presentation","text":"<p>This week saw xDSL\u2019s Michel Weber give a presentation at the ETH Zurich computer science research lab seminar about the xDSL project. Michel was talking about how, in the past year or so, xDSL has grown into a fully fledged open source compiler infrastructure library that enables programmers to build compilers in a high productivity manner.</p> <p>xDSL has been especially useful in Michel\u2019s work as he is focussed around enriching database abstractions using compilation. With xDSL able to handle much of the overhead of writing DSLs, this significantly lowers the barrier to entry in fast prototyping for these architectures.</p> <p>Michel has also been a core contributor to the central xDSL framework, and so was uniquely placed to give researchers at ETH Zurich an insight into what we believe xDSL can contribute and the current challenges. The slides are available to view here.</p>","tags":["technical"]},{"location":"news/2023/05/09/mlir-hackathon-and-workshop/","title":"MLIR hackathon and workshop","text":"<p>Starting Monday 1st of May, we hosted a week long xDSL/MLIR hackathon that culminated in an MLIR workshop on 9th of May in Edinburgh. The idea of the hackathon was to bring together those who are using, an those who are interested in using, xDSL with xDSL developers to further enhance the ecosystem and support new, novel use-cases. There was strong involvement from the CONVOLVE project where a major focus was how to leverge xDSL and MLIR to enable efficient programming of the PULP snitch architecture, culminating in a new snitch and RISC-V dialect being added to xDSL.</p> <p></p> <p>We also spent time working on the core HPC dialects of xDSL, with enhancements made especially around the halo and MPI dialects in order to ensure that these provide good performance. </p> <p>The hackathon culminated on Tuesday the 9th of May with an MLIR workshop organised by xDSL. We had a wide variety of speakers, from those involved in the xDSL project developing dialects and DSLs atop the technology, to those who are heavily leveraging MLIR and interested in the productivity enhancements provided by xDSL. The workshop culminated in round table discussions, where a series of topics were discussed in 30 minute sessions and the 40 or-so workshop participants selected the topic most relavent to them. These ranged from new vectorisation standards, to improved C frontends.</p> <p>Overall the week was very tiring but a great success, special mentio should be given to Arjun Pitchanathan and Anton Lydike who undertook much of the organisation.</p>","tags":["hackathon","workshop","technical"]},{"location":"news/2023/05/18/xdsl-at-durham-hpc-days/","title":"xDSL at Durham HPC Days","text":"<p>Between Tuesday 16th and Friday 19th of May Durham HPC Days was held in the Department of Computer Science at Durham University. A focus session was held on ExCALIBUR and specifically the novel hardware that has been made availble as part of the ExCALIBUR H&amp;ES programme. However, novel hardware is of little use if scientific software developers are unable to programme it, and therefore xDSL gave a talk on our efforts to improve the field of Domain Specific Languages by developing a common ecosystem.</p> <p></p> <p>We described how MLIR and LLVM are ideal to solving the problems around siloed DSL ecosystems, before highlighting how xDSL enables DSL developers to construct a thin abstraction layer atop our Python based ecosystem. Some of our work on the PSyclone and Devito DSLs was then discussed, with the point being that whilst these DSLs are very different, for instance PSyclone is Fortran based whereas Devito is Python based, they can still leverage the same underlying compiler infrastructure and when running on ARCHER2 we observe performance benefits and significant code level reductions compared to their existing bespoke compilers.</p> <p>The workshop was a fanstastic event, with a series of very interesting talks from a wide ranging audience and it was very useful for us to gain feedback from them around our existing and planned activities.</p>","tags":["technical","workshop"]},{"location":"news/2023/05/21/xdsl-at-isc-2023/","title":"xDSL at ISC 2023","text":"<p>ISC 2023 runs between Sunday the 21st and Thursday the 25th of May, and sees the world of HPC descend on Hamburg, Germany, to discuss the latest advances in the field and share latest research. It is a busy week with many different activities going on, and the wider ExCALIBUR programme has published a blog article highlighting all the events that are going on which are associated with the wider ExCALIBUR programme.</p> <p>xDSL is involved in three activities at ISC. Firstly, we have a project poster which will be displayed from Monday at 3pm until the Wednesday and highlights the major objectives and achivements to date of xDSL. The purpose is to both share with the HPC community what we are doing, and also encourage new groups to join us and leverage xDSL for their own work.</p> <p>We are also involved in the Plasma-PEPSC \u2013 Pushing Flagship Plasma Simulation Codes to Tackle Exascale-Enabled Grand Challenges via Performance Optimisation and Codesign Birds of a Feather (BoF) session, which is running Tuesday 23rd of May between 9am and 10am in Hall E and aims to discuss the challenges associated with running plasma physics simulation codes on exascale supercomputers. Our input is around domain specific languages and how these can help scientists to abstractly describe their problem at the mathematical level but still target a rich variety of hardware.</p> <p>Our activities conclude with the Second Combined Workshop on Interactive and Urgent Supercomputing which xDSL is a co-organiser of and will see the challenges that our community faces in enabling interactive and urgent workloads on supercomputers being focussed upon between 9am and 1pm in Hall Y6 on Thursday 25th of May.</p> <p>It promises to be a busy week! If you wish to find out more about xDSL then pop by the EPCC booth (G715)</p>","tags":["conference","technical"]},{"location":"news/2025/01/13/xdsl-at-hipeac-2025/","title":"xDSL at HiPEAC 2025","text":"<p>Please join us at the xDSL workshop, on Monday the 20th of January.</p> <p>The talks will feature a general overview of xDSL, some success stories of xDSL being used in HPC and ML workloads, and some experiments leveraging xDSL infrastructure.</p> <p>We look forward to seeing you there and discussing how xDSL can help you with your projects!</p>","tags":["conference","technical"]},{"location":"news/archive/2025/","title":"2025","text":""},{"location":"news/archive/2023/","title":"2023","text":""},{"location":"news/archive/2022/","title":"2022","text":""},{"location":"news/archive/2021/","title":"2021","text":""},{"location":"news/page/2/","title":"News","text":""}]}